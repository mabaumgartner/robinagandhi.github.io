/*

CWE-664: Improper Control of a Resource Through its Lifetime
The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.
Extended Description
Resources often have explicit instructions on how to be created, used and destroyed. When software does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.
Even without explicit instructions, various principles are expected to be adhered to, such as "Do not use an object until after its creation is complete," or "do not use an object after it has been slated for destruction."

CWE-693: Protection Mechanism Failure
The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.
Extended Description
This weakness covers three distinct situations. A "missing" protection mechanism occurs when the application does not define any mechanism against a certain class of attack. An "insufficient" protection mechanism might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended. Finally, an "ignored" mechanism occurs when a mechanism is available and in active use within the product, but the developer has not applied it in some code path.

CWE-284: Improper Access Control
The software does not restrict or incorrectly restricts access to a resource from an unauthorized actor.
Extended Description
Access control involves the use of several protection mechanisms such as authentication (proving the identity of an actor) authorization (ensuring that a given actor can access a resource), and accountability (tracking of activities that were performed). When any mechanism is not applied or otherwise fails, attackers can compromise the security of the software by gaining privileges, reading sensitive information, executing commands, evading detection, etc.
There are two distinct behaviors that can introduce access control weaknesses:
1. Specification: incorrect privileges, permissions, ownership, etc. are explicitly specified for either the user or the resource (for example, setting a password file to be world-writable, or giving administrator capabilities to a guest user). This action could be performed by the program or the administrator.
2. Enforcement: the mechanism contains errors that prevent it from properly enforcing the specified access control requirements (e.g., allowing the user to specify their own privileges, or allowing a syntactically-incorrect ACL to produce insecure settings). This problem occurs within the program itself, in that it does not actually enforce the intended security policy that the administrator specifies.

Ancestry of CWE-284 (1000 view):
        +-> CWE-664
CWE-284 +
        +-> CWE-693

*/

// CWE-664
sig Resource {}

// CWE-284
sig RestrictedResource extends Resource {
	protectedBy: AccessControl
}

// CWE-284
sig AccessControl {
	implementedBy: ProtectionMechanism,
	protects: RestrictedResource,
	allow: set Actor
}

fact {
	protectedBy = ~protects
}

// CWE-693
sig ProtectionMechanism {
	implements: AccessControl
}

fact {
	implementedBy = ~implements
}

// CWE-284
sig Actor {
}

sig Software {
	// CWE-284
	performAccessOperation: Actor -> RestrictedResource 
}

// CWE-284
pred attemptAccess [s: Software, a: Actor, r: RestrictedResource] {
	a -> r in s.performAccessOperation    
}

run attemptAccess for 1 Resource, 1 Actor, 1 Software, 1 AccessControl, 1 ProtectionMechanism

// CWE-284
assert noImproperAccessControl {
	all s: Software, a: Actor, r: RestrictedResource |
		attemptAccess[s,a,r] implies (a in r.protectedBy.allow)
}

check noImproperAccessControl for 1 Resource, 1 Actor, 1 Software, 1 AccessControl, 1 ProtectionMechanism

/*
fact limitImproperAccessControl {
	all s: Software, a:Actor | 
		a in s.performAccessOperation[a].protectedBy.allow
}
*/

